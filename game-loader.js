// WebAssembly Game Loader
// This file handles loading and initializing your WASM game

class WasmGameLoader {
    constructor(canvasId) {
        this.canvas = document.getElementById(canvasId);
        this.ctx = this.canvas.getContext('2d');
        this.wasmModule = null;
        this.gameInstance = null;
        this.isLoaded = false;
    }

    async loadGame(wasmPath, jsPath) {
        try {
            console.log('Loading WASM game from:', wasmPath);
            
            // Load the JavaScript glue code (generated by Emscripten, etc.)
            if (jsPath) {
                await this.loadScript(jsPath);
            }
            
            // Load the WASM binary
            const wasmResponse = await fetch(wasmPath);
            if (!wasmResponse.ok) {
                throw new Error(`Failed to fetch WASM file: ${wasmResponse.status}`);
            }
            
            const wasmBytes = await wasmResponse.arrayBuffer();
            
            // Instantiate the WASM module
            const wasmModule = await WebAssembly.instantiate(wasmBytes, {
                env: {
                    // Provide any imports your WASM module needs
                    memory: new WebAssembly.Memory({ initial: 256 }),
                    __linear_memory: new WebAssembly.Memory({ initial: 256 }),
                    
                    // Canvas/rendering functions
                    js_clear_canvas: () => this.clearCanvas(),
                    js_draw_rect: (x, y, w, h, r, g, b, a) => this.drawRect(x, y, w, h, r, g, b, a),
                    js_draw_circle: (x, y, radius, r, g, b, a) => this.drawCircle(x, y, radius, r, g, b, a),
                    
                    // Input functions
                    js_get_canvas_width: () => this.canvas.width,
                    js_get_canvas_height: () => this.canvas.height,
                    
                    // Utility functions
                    js_log: (ptr, len) => {
                        const memory = new Uint8Array(this.wasmModule.instance.exports.memory.buffer);
                        const message = new TextDecoder().decode(memory.slice(ptr, ptr + len));
                        console.log('WASM:', message);
                    },
                    
                    // Math functions (if needed)
                    sin: Math.sin,
                    cos: Math.cos,
                    sqrt: Math.sqrt,
                    pow: Math.pow,
                    
                    // Time functions
                    js_get_time: () => performance.now(),
                }
            });
            
            this.wasmModule = wasmModule;
            this.isLoaded = true;
            
            console.log('WASM game loaded successfully!');
            return true;
            
        } catch (error) {
            console.error('Failed to load WASM game:', error);
            return false;
        }
    }
    
    loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
    
    // Canvas rendering helpers
    clearCanvas() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.fillStyle = '#000';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }
    
    drawRect(x, y, w, h, r, g, b, a) {
        this.ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;
        this.ctx.fillRect(x, y, w, h);
    }
    
    drawCircle(x, y, radius, r, g, b, a) {
        this.ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;
        this.ctx.beginPath();
        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);
        this.ctx.fill();
    }
    
    // Game lifecycle methods
    init() {
        if (this.isLoaded && this.wasmModule.instance.exports.init) {
            this.wasmModule.instance.exports.init();
        }
    }
    
    update(deltaTime) {
        if (this.isLoaded && this.wasmModule.instance.exports.update) {
            this.wasmModule.instance.exports.update(deltaTime);
        }
    }
    
    render() {
        if (this.isLoaded && this.wasmModule.instance.exports.render) {
            this.wasmModule.instance.exports.render();
        }
    }
    
    handleInput(inputType, data) {
        if (this.isLoaded && this.wasmModule.instance.exports.handle_input) {
            this.wasmModule.instance.exports.handle_input(inputType, data);
        }
    }
    
    cleanup() {
        if (this.isLoaded && this.wasmModule.instance.exports.cleanup) {
            this.wasmModule.instance.exports.cleanup();
        }
    }
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = WasmGameLoader;
} else {
    window.WasmGameLoader = WasmGameLoader;
}
